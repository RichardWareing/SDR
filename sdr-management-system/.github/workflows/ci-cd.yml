name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_PACKAGE_PATH: './apps/api'
  AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}

jobs:
  # Build and Test Jobs
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run tests
        run: npm run test -- --coverage --watchAll=false
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/dist

  build-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/api/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run tests
        run: npm run test -- --coverage
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: |
            apps/api/dist
            apps/api/host.json
            apps/api/package.json

  build-teams-bot:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/teams-bot
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/teams-bot/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run tests
        run: npm run test
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: teams-bot-build
          path: |
            apps/teams-bot/dist
            apps/teams-bot/package.json

  # Security and Quality Gates
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Infrastructure Validation
  validate-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Validate Bicep templates
        run: |
          az bicep build --file infrastructure/bicep/main.bicep
          az deployment sub validate --location "East US" --template-file infrastructure/bicep/main.bicep --parameters environment=dev

  # Deploy to Development
  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    needs: [build-frontend, build-api, build-teams-bot, security-scan, validate-infrastructure]
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy Infrastructure
        run: |
          az deployment sub create \
            --location "East US" \
            --template-file infrastructure/bicep/main.bicep \
            --parameters environment=dev \
            --parameters appName=sdr \
            --name "deploy-$(date +%Y%m%d-%H%M%S)"
      
      - name: Download API artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: ./api-build
      
      - name: Deploy API to Azure Functions
        uses: azure/functions-action@v1
        with:
          app-name: sdr-dev-func
          package: ./api-build
      
      - name: Download Frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend-build
      
      - name: Deploy Frontend to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          api_location: ""
          output_location: ""
          app_build_command: "echo 'Using pre-built artifacts'"
          skip_app_build: true

  # Deploy to Production
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [build-frontend, build-api, build-teams-bot, security-scan, validate-infrastructure]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy Infrastructure
        run: |
          az deployment sub create \
            --location "East US" \
            --template-file infrastructure/bicep/main.bicep \
            --parameters environment=prod \
            --parameters appName=sdr \
            --name "deploy-$(date +%Y%m%d-%H%M%S)"
      
      - name: Download API artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: ./api-build
      
      - name: Deploy API to Azure Functions
        uses: azure/functions-action@v1
        with:
          app-name: sdr-prod-func
          package: ./api-build
      
      - name: Download Frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend-build
      
      - name: Deploy Frontend to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          api_location: ""
          output_location: ""
          app_build_command: "echo 'Using pre-built artifacts'"
          skip_app_build: true